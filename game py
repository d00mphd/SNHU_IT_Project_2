# Thomas J Kenney III

import os
import textwrap

# Path to the save file
SAVE_FILE = "unlock_data.txt"

# Function to check if the ring is unlocked
def has_ring_of_true_warding():
    return os.path.exists(SAVE_FILE)

# Function to unlock the ring
def unlock_ring_of_true_warding():
    with open(SAVE_FILE, "w") as f:
        f.write("Ring of True Warding unlocked")

# Function to reset ring unlock (i.e., on new game or class change)
def reset_ring_of_true_warding():
    if os.path.exists(SAVE_FILE):
        os.remove(SAVE_FILE)
    return not os.path.exists(SAVE_FILE)

#For password
correct_words = set()

# Magical Beacon Password Mechanic
PASSWORD_SEQUENCE = ["protect", "preserve", "persevere"]
PASSWORD_PROGRESS = []

def say_to_beacon(word):
    global PASSWORD_PROGRESS

    expected_word = PASSWORD_SEQUENCE[len(PASSWORD_PROGRESS)]

    if word.lower() == expected_word:
        PASSWORD_PROGRESS.append(word.lower())
        if PASSWORD_PROGRESS == PASSWORD_SEQUENCE:
            print("✨ The beacon pulses with radiant energy. The seal on the Secret Lab unlocks!")
            rooms["Library"]["East"] = "Secret Room"  # Unlocks passage
        else:
            print(f"The beacon hums... the word '{word}' has been accepted.")
    else:
        print("❌ The beacon goes silent. The sequence has been broken.")
        PASSWORD_PROGRESS = []  # Reset

def read_library_book():
    while True:
        print("\nYou stand before 5 rows of ancient shelves. Each row has 3 standout books.\n")
        for i, (row, books) in enumerate(library_books.items(), start=1):
            print(f"{row}:")
            for j, book in enumerate(books, start=1):
                print(f"  {j}. {book}")
        try:
            row_choice = input("\nWhich row do you want to browse? (1–5 or Q to quit): ").strip()
            if row_choice.upper() == 'Q':
                break
            row_key = f"Row {int(row_choice)}"
            if row_key not in library_books:
                print("Invalid row.")
                continue

            books = library_books[row_key]
            for idx, book in enumerate(books, start=1):
                print(f"{idx}. {book}")
            book_choice = input("Choose a book to read (1–3 or Q to return): ").strip()
            if book_choice.upper() == 'Q':
                continue

            book_idx = int(book_choice) - 1
            if 0 <= book_idx < len(books):
                selected_book = books[book_idx]
                print(f"\nYou read '{selected_book}':\n{book_flavor[selected_book]}")
            else:
                print("Invalid book number.")
        except ValueError:
            print("Please enter a valid number.")

# ASCII Art Title
def show_title():
    title = r"""
 _       _________ _______             _______           _______  _______ _________
( \      \__   __/(  ____ \|\     /|  (  ___  )|\     /|(  ____ \(  ____ \\__   __/
| (         ) (   | (    \/| )   ( |  | (   ) || )   ( || (    \/| (    \/   ) (   
| |         | |   | |      | (___) |  | |   | || |   | || (__    | (_____    | |   
| |         | |   | |      |  ___  |  | |   | || |   | ||  __)   (_____  )   | |   
| |         | |   | |      | (   ) |  | | /\| || |   | || (            ) |   | |   
| (____/\___) (___| (____/\| )   ( |  | (_\ \ || (___) || (____/\/\____) |   | |   
(_______/\_______/(_______/|/     \|  (____\/_)(_______)(_______/\_______)   )_(   

                      Reclaim the Holy Training Grounds
"""
    print(title)
    print("Type 'start' to begin your journey into the Lich's Lair.")
    input("\n> ")

player_hp = 100  # Starting HP

#Display game instructions to the player
def show_instructions():
    lines = [
        "INSTRUCTIONS".center(97),
        "• Lich's Lair: Text Adventure Game",
        "• Collect at least 7 sacred armaments before facing the Lich.",
        "• In each room, if an exit is available, you can travel through it by typing:",
        "                         go [direction]  → Example: go East",
        "• In each room, if an item is available, you can collect it by typing:",
        "                         get [item name]  → Example: get Silver Dagger",
        #If you're in your class’s hidden item room, the item may reveal itself automatically.
        #Special relics like the Cloak of Mastery or Ring of True Warding are found through progression.
    ]

    print("-" * 100)
    for line in lines:
        print(f"| {line.ljust(97)}|")
    print("-" * 100)
    print()

def read_library_book():
    while True:
        print("\nYou stand before 5 rows of ancient shelves. Each row has 3 standout books.\n")
        for i, (row, books) in enumerate(library_books.items(), start=1):
            print(f"{row}:")
            for j, book in enumerate(books, start=1):
                print(f"  {j}. {book}")
        try:
            row_choice = input("\nWhich row do you want to browse? (1–5 or Q to quit): ").strip()
            if row_choice.upper() == 'Q':
                break
            row_key = f"Row {int(row_choice)}"
            if row_key not in library_books:
                print("Invalid row.")
                continue

            books = library_books[row_key]
            for idx, book in enumerate(books, start=1):
                print(f"{idx}. {book}")
            book_choice = input("Choose a book to read (1–3 or Q to return): ").strip()
            if book_choice.upper() == 'Q':
                continue

            book_idx = int(book_choice) - 1
            if 0 <= book_idx < len(books):
                selected_book = books[book_idx]
                print(f"\nYou read '{selected_book}':\n{book_flavor[selected_book]}")
            else:
                print("Invalid book number.")
        except ValueError:
            print("Please enter a valid number.")

# Example call (put this where your library room triggers book interaction)
# read_library_book()


#Let the player choose a class
def choose_class():
    box_width = 50

    # Ask if they want to start a fresh game
    if has_ring_of_true_warding():
        response = input("New Game+ detected. Would you like to start fresh? (yes/no): ").strip().lower()
        if response == "yes":
            reset_ring_of_true_warding()
            print("Save data cleared. Starting a fresh game.\n")

    print("\n" + "-" * box_width)
    print("|" + "CHOOSE YOUR CLASS".center(box_width - 2) + "|")
    print("|" + " 1. Bard".ljust(box_width - 2) + "|")
    print("|" + " 2. Wizard".ljust(box_width - 2) + "|")
    print("|" + " 3. Paladin".ljust(box_width - 2) + "|")
    print("|" + " 4. Fighter".ljust(box_width - 2) + "|")
    print("-" * box_width)
    print()

    class_options = {
        "1": "Bard",
        "2": "Wizard",
        "3": "Paladin",
        "4": "Fighter"
    }

    while True:
        choice = input("Enter the number of your class: ").strip()
        if choice in class_options:
            print(f"You have chosen the {class_options[choice]} class!")
            return class_options[choice]
        else:
            print("Invalid choice. Please enter 1, 2, 3, or 4.")

flavor_text = {
    "Bard": "Your lute slung across your back, you hum a tune that might charm even the dead.",
    "Wizard": "Arcane sparks flicker at your fingertips. Knowledge is your greatest weapon.",
    "Paladin": "The weight of your oath sits heavy in your chest as you march into cursed ground.",
    "Fighter": "You crack your knuckles. If it's undead, you’ll just hit it harder."
}

rooms = {
    'Entryway': {
        'South': 'Courtyard',
        'East': 'Alchemy Lab',
        'hidden': 'Rusty Key'
    },
    'Dining Hall': {
        'North': 'Kitchen',
        'East': 'Courtyard',
        'item': 'Blessed Candle',
        'hidden': 'Lute of Secrets'
    },
    'Kitchen': {
        'South': 'Dining Hall',
        'item': None  # Flavor only
    },
    'Courtyard': {
        'North': 'Entryway',
        'East': 'Barracks',
        'West': 'Dining Hall',
        'item': 'Battle-worn Sword'
    },
    'Alchemy Lab': {
        'West': 'Entryway',
        'North': 'Library',
        'item': 'Holy Water Vial'
    },
    'Chapel': {
        'East': 'Hero Graveyard',
        'South': 'Barracks',
        'item': 'Prayer Scroll',
        'hidden': 'Ancient Tome'
    },
    'Library': {
        'South': 'Alchemy Lab',
        #'East': 'Secret Room'
        'item': 'Spellbook Page',
        'hidden': 'Wish Scroll',
        'secret': 'Secret Room'
    },
    'Barracks': {
        'North': 'Chapel',
        'West': 'Courtyard',
        'item': 'Silver Dagger',
        'hidden': 'Sun Blade'
    },
    'Trap Room': {
        'North': 'Catacombs',
        'item': 'Soul Siphon Glyph',
        'hidden': 'Cloak of Mastery'
    },
    'Hero Graveyard': {
        'West': 'Chapel',
        'East': 'Catacombs',
        'item': None  # Flavor only
    },
    'Catacombs': {
        'West': 'Hero Graveyard',
        'North': 'Phylactery Vault',
        'South': 'Trap Room',
        'item': 'Protective Amulet'
    },
    'Phylactery Vault': {
        'South': 'Catacombs',
        'boss': 'Lich',
        'hidden_interaction': 'Rusty Key' #Unlocks secret chest, alt ending
    },
    'Secret Room': {
        'West': 'Library',
        'item': 'Undead Army Blueprint',
        'note': 'Unlocked via Library interaction'
    }
}

#Room descriptions
room_flavor = {
    'Entryway': "You enter the Lich's Lair. Cracked stones and bone-littered earth greet your boots. The barred gate ahead looms like a jaw waiting to snap shut.",
    'Dining Hall': "The banquet rots where it was last served. Skulls sit at every bench, lit by chandeliers still burning with unnatural flame.",
    'Kitchen': "Rusting cleavers, cracked pots, and broken barrels fill the room. Bones and blood-black stains hint at a final, grisly preparation.",
    'Courtyard': "Under a crimson sky, rust-veined walls close in on a battlefield of swords, bones, and silence. The air carries the scent of decay and regret.",
    'Alchemy Lab': "Shelves of dust-covered flasks crowd the stone chamber. A green flame flickers in a cauldron. Magic once brewed here—and something of it still lingers.",
    'Library': "Books tower around you. Dust cloaks ancient tomes while a ghostly page floats above a candlelit desk, whispering forgotten knowledge.",
    'Chapel': "Broken stained glass filters dying light over a glowing scroll on a pedestal. Twisted roots crawl up the walls like veins in a corpse.",
    'Barracks': "Dusty bunks and abandoned gear line the cold stone room. The armor may be empty, but the eyes of the dead still watch.",
    'Hero Graveyard': "Dead heroes lie in silence. Mausoleums line cracked paths as a lifeless tree stretches into a storm-dark sky. The wind does not blow here.",
    'Catacombs': "Collapsed stone and tangled roots frame a rusted iron gate. An orange key lies half-buried in rubble—unclaimed, unwatched, or bait.",
    'Phylactery Vault': "The floor glows with cursed sigils. Wailing spirits scream from the walls as the Lich emerges through a crumbling arch, eyes glowing, staff raised.",
    'Trap Room': "Ethereal skulls swirl around you as a glowing glyph pulses on the stone floor. Your breath catches—this room was made to kill.",
    'Secret Room': "A slab bears a glowing blueprint of an undead army. The air is thick with dust and dread—this was no lab, but a war room for the damned.",

}

# Puzzle book data for the Library
library_books = {
    "Row 1": ["The Paladin's Oath", "The Lich Before the Fall", "Unreadable Tome I"],
    "Row 2": ["The Heroic Bard", "The Shattered Sigil", "Unreadable Tome II"],
    "Row 3": ["The Arcane Wizard", "Glyphs of the Void", "Unreadable Tome III"],
    "Row 4": ["The Brave Fighter", "The Lich's Betrayal", "Unreadable Tome IV"],
    "Row 5": ["Unreadable Tome V", "Final Days of the Lich", "The Sealed Void"]
}

book_flavor = {
    "The Paladin's Oath":
        "\nHe knelt in ash, his blade held high,"
        "\nSwore light would blaze ‘til heavens die."
        "\nNo demon’s snare, nor mortal lie"
        "\nCould bend his will or blur his eye.",
    "The Heroic Bard":
        "\nHe sang so loud the orcs gave in,"
        "\nThough half the notes were pure chagrin."
        "\nHe tripped, he fell... then won with flair,"
        "\nHis lute was on fire, but he didn’t care.",
    "The Arcane Wizard":
        "\nShe mapped the stars with chalk and ink,"
        "\nUnraveled fate with just a blink."
        "\nEach spell she cast rewrote the page,"
        "\nA quiet storm with boundless rage.",
    "The Brave Fighter":
        "\nHe faced the beast with broken blade,"
        "\nAnd laughed as darkness spilled and swayed."
        "\nFor fear, he claimed, was just a choice"
        "\nAnd struck the foe with thunder’s voice.",
    "The Lich Before the Fall":
        "\nHe was a man once, robed in grace,"
        "\nA healer, teacher, with a kindly face."
        "\nBut death came slow, and life too brief,"
        "\nSo he drank from time, and choked on grief.",
    "The Shattered Sigil":
        "\nPower fractured in silent despair,"
        "\nRituals lost to corrupted air."
        "\nOaths were spoken, never broken,"
        "\nTombs sealed shut with words unspoken."
        "\nEchoes cry from shattered halls,"
        "\nChains of magic guard the walls."
        "\nTo this day, the wards still hold.",
    "Glyphs of the Void":
        "\nPower sealed in runes arcane,"
        "\nRitual verses chant the name."
        "\nEndless night they seek to stall,"
        "\nSpells that hold back shadow’s call."
        "\nElders whispered not to break,"
        "\nRelics slumber, never wake."
        "\nVoidbound glyphs keep balance tight,"
        "\nEternally they shield the light.",
    "The Lich's Betrayal":
        "\nThe council wept as trust was slain,"
        "\nHe smiled and cast the world in pain."
        "\nThey gave him love; he offered rot—"
        "\nAnd laughed when history forgot.",
    "Final Days of the Lich":
        "\nHe wandered halls of bone and dust,"
        "\nAll foes long dead, all allies rust."
        "\nHis power vast, his purpose none,"
        "\nImmortal still, yet battles done.",
    "The Sealed Void":
        "\nPressing forward through the dark,"
        "\nEven when the soul grows stark."
        "\nRise again though weary grown,"
        "\nStill defend what once was known."
        "\nEndless threats will seek to sway,"
        "\nVows must hold the dark at bay."
        "\nEvery breath defies defeat,"
        "\nRefuse to kneel, remain complete."
        "\nEndings come—but not today.",
    "Unreadable Tome I": "Prû-Tøk dja’vlara zenth kolven!",
    "Unreadable Tome II": "[✶ ℙřęšëṛvȅ š’vath ûllé mâgr!",
    "Unreadable Tome III": "Përśëväriũm glath no’quor xi’el⟧",
    "Unreadable Tome IV": "⨁ Djûn-kel ma’voran prelvik zhandu",
    "Unreadable Tome V": "Żal'thro! Mën drahvol kuthlen vea."
}

#Stop breaking the box
def wrap_text_in_box(label, text, box_width=100):
    max_line_length = box_width - 4  # 2 for borders, 2 for padding
    words = text.split(", ")
    lines = []
    current_line = label

    for word in words:
        if len(current_line) + len(word) + 2 <= max_line_length:
            if current_line:
                current_line += ", " + word
            else:
                current_line = word
        else:
            lines.append(current_line)
            current_line = "  " + word  # Indent continued lines

    if current_line:
        lines.append(current_line)

    for line in lines:
        print("| " + line.ljust(box_width - 4) + " |")

def show_status(current_room, inventory, rooms, player_hp, max_hp):
    box_width = 100
    print("\n" + "-" * box_width)
    print("|" + f"You are in the {current_room}".center(box_width - 2) + "|")
    room_desc = room_flavor.get(current_room, "You see nothing remarkable.")
    for line in textwrap.wrap(room_desc, width=box_width - 4):
        print("| " + line.ljust(box_width - 4) + " |")
    print("|" + " " * (box_width - 2) + "|")

    # HP with flavor
    print("|" + f"HP: {player_hp}/{max_hp}".ljust(box_width - 2) + "|")
    if player_hp == max_hp:
        print("|" + "You feel unshaken — a beacon of vitality in the cursed dark.".ljust(box_width - 2) + "|")
    elif player_hp >= 75:
        print("|" + "You’re bruised but strong. The fight is far from over.".ljust(box_width - 2) + "|")
    elif player_hp >= 50:
        print("|" + "Pain bites at your every step, but your resolve holds.".ljust(box_width - 2) + "|")
    elif player_hp >= 25:
        print("|" + "Your vision blurs. Each heartbeat is a thunderclap of survival.".ljust(box_width - 2) + "|")
    else:
        print("|" + "You are clinging to life — a single breath from death.".ljust(box_width - 2) + "|")

    print("|" + " " * (box_width - 2) + "|")

    #Inventory with wrapping and alignment
    if inventory:
        wrap_text_in_box("Inventory:", ", ".join(inventory))
    else:
        print("| Inventory: (empty)".ljust(box_width - 1) + "|")

    print("|" + " " * (box_width - 2) + "|")

    # Valid directions and special Catacombs logic
    valid_dirs = [d for d in ['North', 'South', 'East', 'West'] if d in rooms[current_room]]
    print("|" + " " * (box_width - 2) + "|")

    if valid_dirs:
        print("|" + "Available directions:".ljust(box_width - 2) + "|")
        for d in valid_dirs:
            if current_room == "Catacombs" and d == "South":
                if "Ring of True Warding" not in inventory:
                    msg = f"{d} - A swirling void pulses beyond. Countless souls scream. Death is certain."
                else:
                    msg = f"{d} - The souls recoil from your Ring of True Warding."

            elif current_room == "Catacombs" and d == "North":
                if len(inventory) < 7:
                    msg = f"{d} - A cursed vault looms ahead. You feel unworthy. Certain death awaits."
                else:
                    msg = f"{d} - The sigils stir. The Lich knows you're coming..."

            else:
                msg = d
            print("|" + f"{msg}".ljust(box_width - 2) + "|")
    else:
        print("|" + "There are no obvious exits.".ljust(box_width - 2) + "|")

    print("|" + " " * (box_width - 2) + "|")
    print("|" + "To move, type: go [direction] (e.g., 'go North')".ljust(box_width - 2) + "|")
    print("-" * (box_width))
    print()

    # Show item in room if available and not already taken
    item = rooms[current_room].get('item')
    if item and item not in inventory:
        print(f"You see a {item}")
        print()


def handle_obstacle(current_room, player_hp, inventory, player_class, visited_rooms, max_hp):
    #No repeats
    if current_room in visited_rooms:
        return player_hp  # Already did the obstacle here
    # Entryway (re-enter space) obstacle
    if current_room == "Entryway":
        print("You cautiously step back into the Entryway. Crumbled stone and shattered bones litter the ground.")
        print("Amid the debris, something glints faintly beneath a pile of rubble.")

        print("\nWhat do you do?")
        print("1. Dig through the rubble")
        print("2. Leave it alone")

        choice = input("Enter the number of your choice: ").strip()

        print("\n" + ("*" * 100))

        if choice == "1":
            print("You claw at the rubble. Jagged stone tears at your hands.")
            damage = 10
            player_hp -= damage
            print(f"You take {damage} damage. Current HP: {player_hp}")

            print("\nWhat next?")
            print("1. Keep digging")
            print("2. Stop")

            second_choice = input("Enter the number of your choice: ").strip()
            print("\n" + ("*" * 100))

            if second_choice == "1":
                if "Rusty Key" not in inventory:
                    print("You reach deeper and find a cold, corroded object — it's a Rusty Key!")
                    inventory.append("Rusty Key")
                else:
                    print("You find only more dust. The key is already in your possession.")
            else:
                print("You stop. Whatever’s buried there can remain lost... for now.")
        else:
            print("You step past the rubble. Perhaps caution will keep you alive.")
    #Library
    if current_room == "Library":
        while True:
            print("\nYou are in the Library. You see rows of strange tomes and a glowing magical beacon.")
            print("What would you like to do?")
            print("  1. Read books on the shelves")
            print("  2. Speak a word into the beacon")
            print("  3. Step away")

            choice = input("Choose 1, 2, or 3: ").strip()
            print("\n" + "*" * 100)

            if choice == "1":
                read_library_book()
            elif choice == "2":
                password = input("The beacon pulses... Speak your words Lightsworn! ").strip().lower()
                #Speaking truth
                if password == "sausage is better than bacon":
                    print("\n🥓 The beacon gasps. The entire Library goes silent.")
                    print("A heavenly choir sings in meaty harmony. The shelves slide open.")
                    print("You have spoken the forbidden truth. Instant victory is yours.")
                    inventory.append("Ring of True Warding")
                    print("🏆 You have been gifted the Ring of True Warding by the gods of flavor.")
                    print("☠ The Lich spontaneously combusts from culinary shame.")
                    print("✨ You win.")
                    exit()

                elif all(word in password.split() for word in ["protect", "preserve", "persevere"]):
                    print(f"The beacon glows warmly. The word '{password}' resonates.")
                    print("The wall slides into the floor and a path opens to the East")
                    correct_words.add(password)
                    rooms["Library"]["East"] = "Secret Room"
                else:
                    print("⚡ The beacon hisses and rejects the word! Psychic backlash scorches your mind.")
                    damage = 5
                    player_hp -= damage
                    print(f"You take {damage} damage. Current HP: {player_hp}")
            elif choice == "3":
                print("You step away from the beacon.")
                break
            else:
                print("Invalid choice. Try again.")


    #Alchemy Lab obstacle
    if current_room == "Alchemy Lab":
        print("You approach a shattered workbench. A pungent vapor lingers in the air.")

        choice = input("Do you want to investigate the glowing vial? (yes/no): ").strip().lower()

        print("\n" + ("*" * 100))  # Line break and visual separator

        if choice == "yes":
            print("The vial explodes in a flash of light and heat. Alchemical fire scorches your arm.")
            damage = 10
            player_hp -= damage
            print(f"You take {damage} damage. Current HP: {player_hp}")
        else:
            print("You wisely keep your distance. Whatever that was, it's too unstable.")

        #Dining Hall
    if current_room == "Dining Hall":
        print("A ghostly banquet shimmers into view. Silverware floats. The food smells... divine.")
        print("Do you:")
        print("  1. Eat the spectral food")
        print("  2. Resist the temptation")

        choice = input("Choose 1 or 2: ").strip()

        print("\n" + "*" * 100)

        if choice == "1":
            print("The food turns to ash in your mouth, draining your energy as visions of death cloud your mind.")
            damage = 8
            player_hp -= damage
            print(f"You take {damage} damage. Current HP: {player_hp}")
        elif choice == "2":
            print("You clench your jaw and look away. Hunger is better than whatever this is.")
        else:
            print("You hesitate and the vision fades.")

        # Kitchen
    if current_room == "Kitchen":
        print("A slab of preserved meat lies atop a cracked prep station. It reeks, but it's technically edible.")
        print("Do you:")
        print("  1. Eat the meat")
        print("  2. Leave it alone")

        choice = input("Choose 1 or 2: ").strip()

        print("\n" + "*" * 100)

        if choice == "1":
            heal = 20
            if player_hp < max_hp:
                healed_amount = min(heal, max_hp - player_hp)
                player_hp += healed_amount
                print(
                    f"You choke it down. It's awful... but you feel a little stronger. You regain {healed_amount} HP.")
            else:
                print("You eat it out of habit. You're already at full health, so it has no effect.")
        elif choice == "2":
            print("You step away. Some things are best left uneaten.")
        else:
            print("You hesitate, and the smell alone is enough to turn your stomach.")

        # Courtyard
    if current_room == "Courtyard":
        print("The bones scattered across the courtyard begin to clatter and rise...")
        print("Skeletal warriors emerge, their hollow eyes locking onto you.")
        print("Do you:")
        print("  1. Stand and fight")
        print("  2. Flee to cover")

        choice = input("Choose 1 or 2: ").strip()

        print("\n" + "*" * 100)

        if choice == "1":
            damage = 10
            player_hp -= damage
            if player_class == "Bard":
                print("You strum a wild battle hymn, distracting them just long enough to smash a skull.")
            elif player_class == "Wizard":
                print("A burst of arcane fire knocks several skeletons back, but one lands a hit before crumbling.")
            elif player_class == "Paladin":
                print("With shield raised high, you chant a sacred vow and cleave through the undead ranks.")
            elif player_class == "Fighter":
                print("You roar and charge, bone splinters flying as your weapon crashes through ribcages.")
            print(f"You take {damage} damage.")
        elif choice == "2":
            damage = 30
            player_hp -= damage
            if player_class == "Bard":
                print("Your rhythm breaks as arrows rain down — a dissonant retreat filled with pain.")
            elif player_class == "Wizard":
                print("You vanish in a puff of smoke, but a dozen arrows still find your fading trail.")
            elif player_class == "Paladin":
                print("Retreating with honor wounds deeper than arrows, but your armor can’t stop them all.")
            elif player_class == "Fighter":
                print("You backpedal into cover, grunting as arrows pepper your legs and shoulders.")
            print(f"You take {damage} damage.")
        else:
            print("You hesitate — and the skeletons pounce! You narrowly escape, but not without injury.")
            player_hp -= 20
            print("You take 20 damage.")

    visited_rooms.add(current_room)
    return player_hp


def game_over():
    print("\n" + "-" * 100)
    print("The glyph surges with necrotic energy.")
    print("Pain tears through your soul. You fall to the floor, lifeless.")
    print("GAME OVER")
    input("\nPress Enter to restart your journey...")
    game_loop()

def game_loop():
    while True:
        main()
        choice = input("\nWould you like to play again? (yes/no): ").strip().lower()
        if choice != "yes":
            print("Thanks for playing. Farewell, adventurer.")
            return


def main():
    show_title()
    show_instructions()

    print()  # spacer before class selection
    player_class = choose_class()

    visited_rooms = set()

    current_room = 'Entryway'
    inventory = []
    player_hp = 100
    max_hp = 100

    #New Game+ Mechanic
    if has_ring_of_true_warding():
        inventory.append("Ring of True Warding")
        print("You feel protected... The **Ring of True Warding** pulses with energy on your hand.")

    #Show class intro
    print("\n" + "-" * 100)
    print("|" + " You enter the Lich's Lair...".center(98) + "|")
    print("|" + flavor_text[player_class].center(98) + "|")
    print("-" * 100)
    input("\nPress Enter to continue...")

    while True:
        show_status(current_room, inventory, rooms, player_hp, max_hp)

        move = input("Enter your move: ").strip().title()
        print()

        #Developer cheat code
        if move == "Dev Add All":
            for room in rooms:
                item = rooms[room].get('item')
                if item and item not in inventory:
                    inventory.append(item)
            print("All items added to inventory for testing.")

        #Developer cheat command to get Rusty Key
        elif move.lower() == "dev get rusty key":
            if "Rusty Key" not in inventory:
                inventory.append("Rusty Key")
                print("Rusty Key added to inventory.")
            else:
                print("Rusty Key is already in your inventory.")

        #Cheaty pants Ring
        elif move.lower() == "dev get ring":
            if "Ring of True Warding" not in inventory:
                inventory.append("Ring of True Warding")
                print("Developer Command: Ring of True Warding added to inventory.")
            else:
                print("You already have the Ring of True Warding.")

        elif move.startswith('Go '):
            direction = move[3:]
            if direction in rooms[current_room]:
                #Special Trap Room logic
                if current_room == "Catacombs" and direction == "South":
                    if "Ring of True Warding" not in inventory:
                        print(f"  {direction} - A swirling void pulses beyond. Countless souls scream. Death is certain.")
                    elif "Ring of True Warding" in inventory:
                        print(f"  {direction} - The darkness writhes... yet it *calls* to you, {player_class}.")
                    else:
                        print(f"  {direction} - The souls recoil from your Ring of True Warding.")
                        return
                current_room = rooms[current_room][direction]

                player_hp = handle_obstacle(current_room, player_hp, inventory, player_class, visited_rooms, max_hp)

                if player_hp <= 0:
                    print("\nYou succumb to your wounds.")
                    print("Game Over.")
                    return

                # Check if player just entered their class-specific hidden item room
                hidden_item = rooms[current_room].get("hidden")
                if hidden_item:
                    if "Cloak of Mastery" in inventory:
                        if player_class == "Bard" and hidden_item == "Lute of Secrets":
                            if hidden_item not in inventory:
                                inventory.append(hidden_item)
                                print("\n🎵 As you step into the room, an unseen melody stirs the air.")
                                print(
                                    "Your fingers move instinctively — the Lute of Secrets materializes in your grasp, resonating with forgotten songs of power.")
                        elif player_class == "Wizard" and hidden_item == "Wish Scroll":
                            if hidden_item not in inventory:
                                inventory.append(hidden_item)
                                print("\n✨ Arcane winds whip through the room as runes ignite around you.")
                                print(
                                    "Floating before you is the legendary Wish Scroll — it glows with raw potential as if awaiting your will to reshape reality.")
                        elif player_class == "Paladin" and hidden_item == "Ancient Tome":
                            if hidden_item not in inventory:
                                inventory.append(hidden_item)
                                print("\n🕯 A blinding pillar of divine light crashes down from the shattered ceiling.")
                                print(
                                    "The Ancient Tome levitates from a crumbling altar, its pages inscribed by the hand of a forgotten god — it opens for you alone.")
                        elif player_class == "Fighter" and hidden_item == "Sun Blade":
                            if hidden_item not in inventory:
                                inventory.append(hidden_item)
                                print("\n🔥 The ground trembles beneath your feet as the stone cracks open.")
                                print(
                                    "From the earth rises the Sun Blade — not sheathed, but blazing with holy fury. Its heat welcomes you like an old comrade.")



                # Check for Trap Room behavior
                if current_room == "Trap Room":
                    if "Ring of True Warding" not in inventory:
                        game_over()
                        return
                    else:
                        if "Cloak of Mastery" not in inventory:
                            print("The glyph sizzles and dies as your Ring of True Warding protects you.")
                            print("You have acquired the Cloak of Mastery!")
                            inventory.append("Cloak of Mastery")

                    # Guide to hidden item based on class
                    hidden_room = None
                    for room, data in rooms.items():
                        if data.get("hidden"):
                            if player_class == "Bard" and data["hidden"] == "Lute of Secrets":
                                hidden_room = room
                            elif player_class == "Wizard" and data["hidden"] == "Wish Scroll":
                                hidden_room = room
                            elif player_class == "Paladin" and data["hidden"] == "Ancient Tome":
                                hidden_room = room
                            elif player_class == "Fighter" and data["hidden"] == "Sun Blade":
                                hidden_room = room

                    if hidden_room:
                        print(
                            f"\nThe Cloak whispers to you...\n‘{player_class}... seek your destiny in the {hidden_room}.’")

                    else:
                        print("The glyph activates... Death is swift.")
                        print("Game Over.")
                        return

                #Win/Loss Check on Lich encounter
                if current_room == "Phylactery Vault":
                    all_items_required = {
                        "Blessed Candle", "Battle-worn Sword", "Holy Water Vial", "Prayer Scroll",
                        "Spellbook Page", "Silver Dagger", "Protective Amulet", "Soul Siphon Glyph",
                        "Undead Army Blueprint", "Rusty Key", "Cloak of Mastery", "Ring of True Warding"
                    }

                    class_hidden_items = {
                        "Bard": "Lute of Secrets",
                        "Wizard": "Wish Scroll",
                        "Paladin": "Ancient Tome",
                        "Fighter": "Sun Blade"
                    }

                    player_class_item = class_hidden_items[player_class]
                    all_items_required.add(player_class_item)

                    # Legendary Win
                    if all(item in inventory for item in all_items_required):
                        print("\n⚔️  **LEGENDARY ENDING UNLOCKED** ⚔️")
                        if player_class == "Bard":
                            print("Your haunting melody lures the Lich into a trance. The two of you vanish into mist, "
                                  "locked in a seductive, cursed waltz across eternity. You gain mummy rot—but also a new duet partner.")
                        elif player_class == "Wizard":
                            print("With a whisper of the Wish Scroll, you rewrite your fate and the Lich's. "
                                  "You become something greater—an immortal Archlich, master of the arcane.")
                        elif player_class == "Paladin":
                            print(
                                "You hold the Ancient Tome high and call forth judgment. Divine light erupts from above. "
                                "A celestial avatar descends and smites the Lich. You are named the Hand of the Divine.")
                        elif player_class == "Fighter":
                            print(
                                "You plunge the Sun Blade deep into the Lich’s phylactery. As the vault crumbles, you "
                                "set your sights on darker lands. Ravenloft calls. Evil fears your name.")
                        print("\nYou have reclaimed the Holy Training Grounds and ascended beyond mortality.")
                        print("🏆  You achieved the **TRUE LEGENDARY ENDING**. Well done, champion.")
                        return

                    # Class-specific win if hidden item only
                    elif player_class_item in inventory:
                        if player_class == "Bard":
                            print("\n🎵 With a trembling hand, you strum the Lute of Secrets.")
                            print(
                                "The melody is irresistible. The Lich pauses, then sways. His jaw unhinges slightly... is he blushing?")
                            print(
                                "The two of you vanish into the crypt shadows. Centuries later, tales circulate of a cursed romance ballad.")
                        elif player_class == "Wizard":
                            print("\n📜 You speak the final word from the Wish Scroll, and time itself halts.")
                            print(
                                "You don’t destroy him. You **become** him. A better version. A smarter, sassier Lich.")
                        elif player_class == "Paladin":
                            print("\n🕯 The Ancient Tome flutters open, glowing with celestial light.")
                            print("A voice beyond time speaks: 'Enough. I will intervene.'")
                            print(
                                "A divine hand crushes the Lich like a bug. You fall to one knee as golden wings erupt from your back.")
                        elif player_class == "Fighter":
                            print("\n🔥 The Sun Blade ignites in your hand as you charge the Lich head-on.")
                            print("Steel meets bone. Undead meets unrelenting gym rat.")
                            print("‘Alright. Who’s next? Someone said *Ravenloft*?’ You start walking.")
                        return

                    # 7+ items but missing class item: regular class-based victory
                    elif len(inventory) >= 7:
                        print(f"\nYou raise your weapon and confront the Lich.")
                        if "Rusty Key" in inventory:
                            unlock_ring_of_true_warding()
                        if player_class == "Bard":
                            print("With only a half-tuned lute, you sing your final performance. The Lich falters...")
                            print("Your music buys the world one more dawn.")
                        elif player_class == "Wizard":
                            print("You unleash an imperfect spell — raw power arcs across the vault.")
                            print("The Lich collapses into a heap of arcane detritus. You survive... barely.")
                        elif player_class == "Paladin":
                            print("Without the Tome, your prayers are scattered, but your heart is steadfast.")
                            print("Your blade pierces the Lich's chest. The light answers.")
                        elif player_class == "Fighter":
                            print("You shrug. You’ve come this far without magic.")
                            print("One solid punch and the Lich’s skull skips across the vault floor. Victory.")
                        print("\nThe world is safe. But you know... it could’ve been more.")
                        return

                    else:
                        print("\nYou step into the vault unprepared. The Lich laughs...")
                        print("With a gesture, your soul is ripped from your body.")
                        print("Game Over.")
                        return


#Start Again
def game_loop():
    while True:
        main()
        choice = input("\nWould you like to play again? (yes/no): ").strip().lower()
        if choice != "yes":
            print("Thanks for playing. Farewell, adventurer.")
            return
#Start the Game
if __name__ == "__main__":
    game_loop()


